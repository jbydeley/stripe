/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface StripePay {
      /**
       * The amount to charge 
       */
      'amount': number;
      /**
       * The currency to use 
       */
      'currency': string;
      /**
       * The description of the product 
       */
      'description': string;
      /**
       * The image to use in the stripe popup 
       */
      'image': string;
      /**
       * The stripe key to charge against 
       */
      'key': string;
      /**
       * The locale to use in the stripe popup 
       */
      'locale': string;
      /**
       * The name of the product 
       */
      'name': string;
      /**
       * Open the stripe popup to accept payment
       */
      'openStripe': ({ name, description, currency, amount }: { name: any; description: any; currency: any; amount: any; }) => void;
      /**
       * Try to require zip code in the stripe popup 
       */
      'zipcode': boolean;
    }
  }


    interface HTMLStripePayElement extends StencilComponents.StripePay, HTMLStencilElement {}

    var HTMLStripePayElement: {
      prototype: HTMLStripePayElement;
      new (): HTMLStripePayElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'stripe-pay': JSXElements.StripePayAttributes;
    }
  }

  namespace JSXElements {

    export interface StripePayAttributes extends HTMLAttributes {
      /**
       * The amount to charge 
       */
      'amount'?: number;
      /**
       * The currency to use 
       */
      'currency'?: string;
      /**
       * The description of the product 
       */
      'description'?: string;
      /**
       * The image to use in the stripe popup 
       */
      'image'?: string;
      /**
       * The stripe key to charge against 
       */
      'key'?: string;
      /**
       * The locale to use in the stripe popup 
       */
      'locale'?: string;
      /**
       * The name of the product 
       */
      'name'?: string;
      /**
       * Called when the stripe popup is closed 
       */
      'onOnClose'?: (event: CustomEvent) => void;
      /**
       * Called when a token is received after payment 
       */
      'onOnToken'?: (event: CustomEvent) => void;
      /**
       * Try to require zip code in the stripe popup 
       */
      'zipcode'?: boolean;
    }
  }

  interface HTMLElementTagNameMap {
    'stripe-pay': HTMLStripePayElement
  }

  interface ElementTagNameMap {
    'stripe-pay': HTMLStripePayElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;